name: 'Cloud-Native Infrastructure & Applications'

on:
  push:
    branches:
      - main
      - develop
    paths:
      - 'terraformx/**'
      - 'k8sx/**'
      - 'srcx/**'
      - '.github/workflowsx/**'
  pull_request:
    branches:
      - main
    paths:
      - 'terraformx/**'
      - 'k8sx/**'
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy'
        required: true
        default: 'dev'
        type: choice
        options:
          - dev
          - staging
          - prod
      action:
        description: 'Action to perform'
        required: true
        default: 'plan'
        type: choice
        options:
          - plan
          - apply
          - destroy
          - deploy-apps

env:
  TF_VERSION: '1.6.0'
  ARM_CLIENT_ID: ${{ secrets.AZURE_CLIENT_ID }}
  ARM_CLIENT_SECRET: ${{ secrets.AZURE_CLIENT_SECRET }}
  ARM_SUBSCRIPTION_ID: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
  ARM_TENANT_ID: ${{ secrets.AZURE_TENANT_ID }}
  
jobs:
  terraform-plan:
    name: 'Infrastructure Plan'
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request' || (github.event_name == 'workflow_dispatch' && github.event.inputs.action == 'plan')
    
    steps:
    - name: Checkout
      uses: actions/checkout@v4

    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v3
      with:
        terraform_version: ${{ env.TF_VERSION }}

    - name: Terraform Format Check
      id: fmt
      run: terraform fmt -check -recursive
      working-directory: ./terraform

    - name: Terraform Init
      id: init
      run: |
        terraform init \
          -backend-config="resource_group_name=${{ secrets.TERRAFORM_STATE_RG }}" \
          -backend-config="storage_account_name=${{ secrets.TERRAFORM_STATE_SA }}" \
          -backend-config="container_name=tfstate" \
          -backend-config="key=${{ github.event.inputs.environment || 'dev' }}.terraform.tfstate"
      working-directory: ./terraform

    - name: Terraform Validate
      id: validate
      run: terraform validate
      working-directory: ./terraform

    - name: Terraform Plan
      id: plan
      run: |
        terraform plan \
          -var="environment=${{ github.event.inputs.environment || 'dev' }}" \
          -var="postgres_admin_password=${{ secrets.POSTGRES_ADMIN_PASSWORD }}" \
          -out=tfplan
      working-directory: ./terraform

    - name: Update Pull Request
      uses: actions/github-script@v7
      if: github.event_name == 'pull_request'
      env:
        PLAN: "terraform\n${{ steps.plan.outputs.stdout }}"
      with:
        github-token: ${{ secrets.GITHUB_TOKEN }}
        script: |
          const output = `#### Terraform Format and Style üñå\`${{ steps.fmt.outcome }}\`
          #### Terraform Initialization ‚öôÔ∏è\`${{ steps.init.outcome }}\`
          #### Terraform Validation ü§ñ\`${{ steps.validate.outcome }}\`
          #### Terraform Plan üìñ\`${{ steps.plan.outcome }}\`

          <details><summary>Show Plan</summary>

          \`\`\`\n
          ${process.env.PLAN}
          \`\`\`

          </details>

          *Pusher: @${{ github.actor }}, Action: \`${{ github.event_name }}\`*`;

          github.rest.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: output
          })

  terraform-apply:
    name: 'Deploy Infrastructure'
    runs-on: ubuntu-latest
    if: |
      (github.ref == 'refs/heads/main' && github.event_name == 'push') ||
      (github.event_name == 'workflow_dispatch' && github.event.inputs.action == 'apply')
    environment: ${{ github.event.inputs.environment || 'dev' }}
    
    outputs:
      aks_cluster_name: ${{ steps.outputs.outputs.aks_cluster_name }}
      resource_group_name: ${{ steps.outputs.outputs.resource_group_name }}
      container_registry_name: ${{ steps.outputs.outputs.container_registry_name }}
      application_gateway_ip: ${{ steps.outputs.outputs.application_gateway_ip }}
    
    steps:
    - name: Checkout
      uses: actions/checkout@v4

    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v3
      with:
        terraform_version: ${{ env.TF_VERSION }}

    - name: Terraform Init
      run: |
        terraform init \
          -backend-config="resource_group_name=${{ secrets.TERRAFORM_STATE_RG }}" \
          -backend-config="storage_account_name=${{ secrets.TERRAFORM_STATE_SA }}" \
          -backend-config="container_name=tfstate" \
          -backend-config="key=${{ github.event.inputs.environment || 'dev' }}.terraform.tfstate"
      working-directory: ./terraform

    - name: Terraform Plan
      run: |
        terraform plan \
          -var="environment=${{ github.event.inputs.environment || 'dev' }}" \
          -var="postgres_admin_password=${{ secrets.POSTGRES_ADMIN_PASSWORD }}" \
          -out=tfplan
      working-directory: ./terraform

    - name: Terraform Apply
      run: terraform apply -auto-approve tfplan
      working-directory: ./terraform

    - name: Save Terraform Outputs
      id: outputs
      run: |
        echo "aks_cluster_name=$(terraform output -raw aks_cluster_name)" >> $GITHUB_OUTPUT
        echo "resource_group_name=$(terraform output -raw resource_group_name)" >> $GITHUB_OUTPUT
        echo "container_registry_name=$(terraform output -raw container_registry_name)" >> $GITHUB_OUTPUT
        echo "application_gateway_ip=$(terraform output -raw application_gateway_ip)" >> $GITHUB_OUTPUT
      working-directory: ./terraform

  build-and-push:
    name: 'Build & Push Container Images'
    runs-on: ubuntu-latest
    needs: terraform-apply
    if: |
      (github.ref == 'refs/heads/main' && github.event_name == 'push') ||
      (github.event_name == 'workflow_dispatch' && contains(fromJson('["apply", "deploy-apps"]'), github.event.inputs.action))
    
    strategy:
      matrix:
        service: [backend, frontend]
    
    steps:
    - name: Checkout
      uses: actions/checkout@v4

    - name: Azure Login
      uses: azure/login@v1
      with:
        creds: ${{ secrets.AZURE_CREDENTIALS }}

    - name: Get ACR Login Server
      id: acr
      run: |
        ACR_NAME="${{ needs.terraform-apply.outputs.container_registry_name }}"
        LOGIN_SERVER=$(az acr show --name $ACR_NAME --query loginServer --output tsv)
        echo "login_server=$LOGIN_SERVER" >> $GITHUB_OUTPUT

    - name: Build and Push Backend Image
      if: matrix.service == 'backend'
      run: |
        cd src/backend
        az acr build --registry ${{ needs.terraform-apply.outputs.container_registry_name }} \
          --image backend:${{ github.sha }} \
          --image backend:latest \
          .

    - name: Build and Push Frontend Image
      if: matrix.service == 'frontend'
      run: |
        cd src/frontend
        az acr build --registry ${{ needs.terraform-apply.outputs.container_registry_name }} \
          --image frontend:${{ github.sha }} \
          --image frontend:latest \
          .

  deploy-applications:
    name: 'Deploy Applications to AKS'
    runs-on: ubuntu-latest
    needs: [terraform-apply, build-and-push]
    if: |
      (github.ref == 'refs/heads/main' && github.event_name == 'push') ||
      (github.event_name == 'workflow_dispatch' && contains(fromJson('["apply", "deploy-apps"]'), github.event.inputs.action))
    environment: ${{ github.event.inputs.environment || 'dev' }}
    
    steps:
    - name: Checkout
      uses: actions/checkout@v4

    - name: Azure Login
      uses: azure/login@v1
      with:
        creds: ${{ secrets.AZURE_CREDENTIALS }}

    - name: Get AKS Credentials
      run: |
        az aks get-credentials \
          --resource-group ${{ needs.terraform-apply.outputs.resource_group_name }} \
          --name ${{ needs.terraform-apply.outputs.aks_cluster_name }} \
          --overwrite-existing

    - name: Setup Kubectl
      uses: azure/setup-kubectl@v3
      with:
        version: 'v1.28.0'

    - name: Setup Helm
      uses: azure/setup-helm@v3
      with:
        version: '3.12.0'

    - name: Deploy NGINX Ingress Controller
      run: |
        helm repo add ingress-nginx https://kubernetes.github.io/ingress-nginx
        helm repo update
        
        helm upgrade --install ingress-nginx ingress-nginx/ingress-nginx \
          --namespace ingress-nginx \
          --create-namespace \
          --set controller.service.annotations."service\.beta\.kubernetes\.io/azure-load-balancer-health-probe-request-path"=/healthz \
          --set controller.service.externalTrafficPolicy=Local \
          --wait

    - name: Deploy Cert-Manager
      run: |
        helm repo add jetstack https://charts.jetstack.io
        helm repo update
        
        helm upgrade --install cert-manager jetstack/cert-manager \
          --namespace cert-manager \
          --create-namespace \
          --set installCRDs=true \
          --wait

    - name: Replace Image Tags in Manifests
      run: |
        export ACR_NAME="${{ needs.terraform-apply.outputs.container_registry_name }}"
        export IMAGE_TAG="${{ github.sha }}"
        export ENVIRONMENT="${{ github.event.inputs.environment || 'dev' }}"
        
        # Replace placeholders in Kubernetes manifests
        find k8s/ -name "*.yaml" -exec sed -i "s|{{ACR_NAME}}|$ACR_NAME|g" {} \;
        find k8s/ -name "*.yaml" -exec sed -i "s|{{IMAGE_TAG}}|$IMAGE_TAG|g" {} \;
        find k8s/ -name "*.yaml" -exec sed -i "s|{{ENVIRONMENT}}|$ENVIRONMENT|g" {} \;

    - name: Deploy Applications
      run: |
        # Deploy namespace and secrets first
        kubectl apply -f k8s/namespace.yaml
        kubectl apply -f k8s/secrets.yaml
        
        # Deploy applications
        kubectl apply -f k8s/backend/
        kubectl apply -f k8s/frontend/
        kubectl apply -f k8s/ingress/
        
        # Wait for deployments to be ready
        kubectl wait --for=condition=available --timeout=300s deployment/backend -n pyreact-${{ github.event.inputs.environment || 'dev' }}
        kubectl wait --for=condition=available --timeout=300s deployment/frontend -n pyreact-${{ github.event.inputs.environment || 'dev' }}

    - name: Get Application URLs
      id: urls
      run: |
        # Get the external IP of the ingress
        EXTERNAL_IP=$(kubectl get service ingress-nginx-controller -n ingress-nginx -o jsonpath='{.status.loadBalancer.ingress[0].ip}')
        echo "external_ip=$EXTERNAL_IP" >> $GITHUB_OUTPUT
        echo "frontend_url=http://$EXTERNAL_IP" >> $GITHUB_OUTPUT
        echo "backend_url=http://$EXTERNAL_IP/api" >> $GITHUB_OUTPUT

    - name: Run Health Checks
      run: |
        echo "Waiting for applications to be ready..."
        sleep 60
        
        # Health check for backend
        BACKEND_URL="${{ steps.urls.outputs.backend_url }}/health"
        echo "Checking backend health at: $BACKEND_URL"
        
        # Health check for frontend  
        FRONTEND_URL="${{ steps.urls.outputs.frontend_url }}"
        echo "Checking frontend at: $FRONTEND_URL"
        
        echo "‚úÖ Applications deployed successfully!"

    - name: Create Deployment Summary
      run: |
        echo "## üöÄ Cloud-Native Deployment Complete!" >> $GITHUB_STEP_SUMMARY
        echo "### üèóÔ∏è Infrastructure Details" >> $GITHUB_STEP_SUMMARY
        echo "- **Environment**: ${{ github.event.inputs.environment || 'dev' }}" >> $GITHUB_STEP_SUMMARY
        echo "- **AKS Cluster**: ${{ needs.terraform-apply.outputs.aks_cluster_name }}" >> $GITHUB_STEP_SUMMARY
        echo "- **Container Registry**: ${{ needs.terraform-apply.outputs.container_registry_name }}" >> $GITHUB_STEP_SUMMARY
        echo "- **Application Gateway IP**: ${{ needs.terraform-apply.outputs.application_gateway_ip }}" >> $GITHUB_STEP_SUMMARY
        echo "### üåê Application URLs" >> $GITHUB_STEP_SUMMARY
        echo "- **Frontend**: ${{ steps.urls.outputs.frontend_url }}" >> $GITHUB_STEP_SUMMARY
        echo "- **Backend API**: ${{ steps.urls.outputs.backend_url }}" >> $GITHUB_STEP_SUMMARY
        echo "### üìä Container Images Built" >> $GITHUB_STEP_SUMMARY
        echo "- **Backend**: ${{ needs.terraform-apply.outputs.container_registry_name }}.azurecr.io/backend:${{ github.sha }}" >> $GITHUB_STEP_SUMMARY
        echo "- **Frontend**: ${{ needs.terraform-apply.outputs.container_registry_name }}.azurecr.io/frontend:${{ github.sha }}" >> $GITHUB_STEP_SUMMARY

  security-scan:
    name: 'Security & Compliance Scanning'
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request' || github.ref == 'refs/heads/main'
    
    steps:
    - name: Checkout
      uses: actions/checkout@v4

    - name: Run Checkov on Terraform
      id: checkov
      uses: bridgecrewio/checkov-action@master
      with:
        directory: ./terraform
        framework: terraform
        output_format: sarif
        output_file_path: checkov-results.sarif

    - name: Upload Checkov results to GitHub Security
      uses: github/codeql-action/upload-sarif@v3
      if: always()
      with:
        sarif_file: checkov-results.sarif

    - name: Run TFSec
      uses: aquasecurity/tfsec-action@v1.0.3
      with:
        working_directory: ./terraform

    - name: Run Kubesec on Kubernetes Manifests
      run: |
        # Install kubesec
        curl -sSX GET "https://api.github.com/repos/controlplaneio/kubesec/releases/latest" \
        | grep "browser_download_url.*linux" \
        | cut -d '"' -f 4 \
        | xargs curl -sSL -o kubesec
        chmod +x kubesec
        
        # Scan Kubernetes manifests
        find k8s/ -name "*.yaml" -exec ./kubesec scan {} \;

    - name: Container Image Vulnerability Scan
      if: github.ref == 'refs/heads/main'
      run: |
        # Install Trivy
        sudo apt-get update
        sudo apt-get install wget apt-transport-https gnupg lsb-release
        wget -qO - https://aquasecurity.github.io/trivy-repo/deb/public.key | sudo apt-key add -
        echo "deb https://aquasecurity.github.io/trivy-repo/deb $(lsb_release -sc) main" | sudo tee -a /etc/apt/sources.list.d/trivy.list
        sudo apt-get update
        sudo apt-get install trivy
        
        # Note: In a real scenario, you'd scan the built images from ACR
        echo "Container vulnerability scanning would happen here with built images"

  terraform-destroy:
    name: 'Destroy Infrastructure'
    runs-on: ubuntu-latest
    if: github.event_name == 'workflow_dispatch' && github.event.inputs.action == 'destroy'
    environment: ${{ github.event.inputs.environment }}
    
    steps:
    - name: Checkout
      uses: actions/checkout@v4

    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v3
      with:
        terraform_version: ${{ env.TF_VERSION }}

    - name: Terraform Init
      run: |
        terraform init \
          -backend-config="resource_group_name=${{ secrets.TERRAFORM_STATE_RG }}" \
          -backend-config="storage_account_name=${{ secrets.TERRAFORM_STATE_SA }}" \
          -backend-config="container_name=tfstate" \
          -backend-config="key=${{ github.event.inputs.environment }}.terraform.tfstate"
      working-directory: ./terraform

    - name: Terraform Destroy
      run: |
        terraform destroy -auto-approve \
          -var="environment=${{ github.event.inputs.environment }}" \
          -var="postgres_admin_password=${{ secrets.POSTGRES_ADMIN_PASSWORD }}"
      working-directory: ./terraform